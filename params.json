{
  "name": "XCFit",
  "tagline": "'Swift' your iOS macOS Apps towards BDD. Full Stack BDD for iOS and macOS Apps with Swift, Xcode using XCUITest, Cucumberish, FitNesse and friends.",
  "body": "[![CI Status](http://img.shields.io/travis/Shashikant86/XCFit.svg?style=flat)](https://travis-ci.org/Shashikant86/XCFit)\r\n[![Version](https://img.shields.io/cocoapods/v/XCFit.svg?style=flat)](http://cocoapods.org/pods/XCFit)\r\n[![License](https://img.shields.io/cocoapods/l/XCFit.svg?style=flat)](http://cocoapods.org/pods/XCFit)\r\n[![Platform](https://img.shields.io/cocoapods/p/XCFit.svg?style=flat)](http://cocoapods.org/pods/XCFit)\r\n\r\n#XCFit\r\n## XCFit - 'Swift' Your iOS/macOS apps towards BDD\r\n\r\n####XCFit a.k.a ([XCUI](https://developer.apple.com/videos/play/wwdc2015/406/0), [Cucumberish](https://github.com/Ahmed-Ali/Cucumberish) and [Fitnesse](https://github.com/paulstringer/OCSlimProject) Integrations Tests) is a full stack Xcode BDD framework for [Swift](https://swift.org) iOS and macOS apps. XCFit allows us to write API, UI and Acceptance Tests with Swift in human readable language using tools like [Cucumber](https://cucumber.io/) and [Fitnesse](http://fitnesse.org/) in Xcode. We can still use Apple's brand new UI Testing framework (XCUI) under the hood of Cucumberish. XCFit is fully automated solution for Cucumberish and Fitnesse. You can use 80(Fitnesse):20(Cucumberish) formula to automate Acceptance and UI Testing for better coverage and faster feedback. XCFit is available on [RubyGem](https://rubygems.org/gems/xcfit) and [CocoaPods](http://cocoadocs.org/docsets/XCFit).\r\n\r\n\r\n### XCFit Features\r\nThere are few reason you should go for XCFit\r\n***\r\n  -  You can now write Given When Then and Decision Table in Xcode !! YAY.. Thanks to Cucumberish and OCSlimProject ! And XCFit automated them !!\r\n  -  You can now write/Execute all your Acdeptance Tests and UI Tests using Apple's brand new programming language \"Swift\" in Xcode. Goodbye Appium, Calabash, Frank, KIF and Goodbye Ruby,Java, Python. It's pure Swift !!\r\n\r\n  -  XCFit provides Xcode Templates to create new Cucumberish and Fitnesse targets which reduce hectic Xcode configuration steps. It's all automated in XCFit\r\n  -  One command to set all fully automated Xcode template for Cucumberish and Fitnesse targets\r\n  - New Template to create Gherkin Feature file in Xcode\r\n  - Automated [Cucumberish](https://github.com/Ahmed-Ali/Cucumberish) Setup in one command\r\n  - Enhanced [OCSlimProject](https://github.com/paulstringer/OCSlimProject) templates and automated Fitnesse download process.\r\n  - XCFit target templates are independent of native Xcode Test targets.\r\n  - We can stiil use Apple's brand new XCUI Testing framework. Its native Xcode implementation, No Appium, Calabash etc etc\r\n  - Setup Cucumberish and Fitnesse in Xcode within few minutes !!\r\n\r\n  ***\r\n\r\n\r\n### Quick Demo with Example App\r\n\r\nYou can clone the existing repo which has a demo app. To get started..Watch this animated GIF for the steps below\r\n\r\n  ![image](https://raw.githubusercontent.com/Shashikant86/XCFit-GIFS/master/Quick_Demo.gif)\r\n\r\n  ```\r\n  $ git clone https://github.com/Shashikant86/XCFit\r\n  $ cd XCFit/XCFitDemo\r\n  $ open XCFitDemo.xcworkspace\r\n  ```\r\n  Run Unit, UI and Cucumberish test with Xcode. \"cmd + U\". Edit Scheme if nessesary to avoid running Unit Tests for this demo. Or Run nit from command line. Update Simulator device/OS version as installed in your Xcode if nessessary\r\n\r\n  ```\r\n  $ xcodebuild -workspace XCFitDemo.xcworkspace -scheme XCFitDemo -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 6,OS=9.3' test | xcpretty -r html -r junit --test --color\r\n```\r\n  Watch out HTML and JUnit reports generated in the 'Build/reports/' directory with XCPretty. Install XCpretty if you havent got already.\r\n\r\n  Running Fitnesse Tests: Clean, Build and Execute\r\n\r\n  ```\r\n  $ xcodebuild -workspace XCFitDemo.xcworkspace -scheme XCFitAcceptanceTests -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 6,OS=9.3' clean build | xcpretty\r\n\r\n  $java -jar fitnesse-standalone.jar -v -o -c \"FrontPage?suite&format=junit\"\r\n\r\n  ```\r\n Curently XCFitDemo App is configured on TravisCI which runs both Cucumberish and Fitnesse Tests. The sample .travis.yml is in the Github repo and sample logs from TravisCI [here](https://travis-ci.org/Shashikant86/XCFit/builds/145963673). \r\n\r\n\r\nBig Thanks to\r\n  - [Cucumberish](https://github.com/Ahmed-Ali/Cucumberish) : Provide native [Gherkin](https://github.com/cucumber/cucumber/wiki/Gherkin) parser for iOS Apps to enable BDD in Xcode using Given When Then. Yay!\r\n  - [OCSlimProject](https://github.com/paulstringer/OCSlimProject) : Provide Xcode Templates to enable BDD with Decision Tables using Fitnesse\r\n\r\nXCFit automated configuration of these two guys.\r\n\r\n### Version\r\nCocoaPods -- [XCFit-CocoaPods](http://cocoadocs.org/docsets/XCFit) : 0.1.0\r\n\r\nRubyGems  -- [xcfit-RubyGem](https://rubygems.org/gems/xcfit)  : 0.8.0\r\n\r\n### Tech & Software Requirements\r\n\r\nXCFit uses a number of open source projects to work properly. You need to have following\r\n\r\nHardware : You must have Mac Operating System with OSX/MacOS version > 10.9\r\n\r\nSoftware:\r\n* [Ruby](https://www.ruby-lang.org/en/) - Use [RVM](https://rvm.io/) for GEM management. Ideally Ruby > 2.X\r\n* [Xcode](https://developer.apple.com/xcode/) - Ideally Xcode 7.X\r\n* [RubyGems](https://rubygems.org/) - RubyGem with [Cocoapods](https://cocoapods.org/) installed\r\n* [Curl on Mac](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/curl.1.html) - Might be pre-installed but worth double checking.\r\n* Ruby Packages : Xcpretty, Fastlane(Optional), Rake, Bundler.. Install with 'gem install <package_name>'\r\n\r\n\r\n### Installation\r\n\r\nXCFit requires [RubyGems](https://rubygems.org/) to run.\r\n\r\nYou need Gulp installed globally:\r\n\r\n\r\n      $ gem install xcfit\r\n\r\nNow you are good to get started with XCFit for now. Later we also need to install XCFit Pod.\r\n\r\n# Usage\r\nNow that you can execute 'xcfit' command from your terminal/iTerm etc etc. Example Output Looks like this :\r\n\r\n```\r\n$ xcfit\r\nTasks:\r\n  xcfit get_cucumberish VERSION  # Downloads Cucumberish version and Create Features directory. You must execute this from Cucumberish Xcode Target directory\r\n  xcfit get_fitnesse             # Download Fitnesse JAR file from Internet. You must execute this from Xcode Fitnesse Acceptance Test Xcode Target directory\r\n  xcfit help [TASK]              # Describe available tasks or one specific task\r\n  xcfit set_xcode_templates      # Generate All Xcode Templates for the Gherkin Feature Files & targets for Cucumberish and Fitnesse\r\n  xcfit version                  # Get the current version number\r\n\r\n```\r\n\r\n## Setup Xcode Templates\r\n\r\nIn existing app or brand new app, we have to enable the Xcode templates for files and targets to speed up the things. Run following command from your termonal\r\n\r\n\r\n```sh\r\n$ xcfit set_xcode_templates\r\n\r\n```\r\n\r\n-  This will add couple of templates to your Xcode for iOS and macOS apps. In your app if you go to 'File--->New--->Target'\r\n\r\nYou will see new option for iOS and OSX i.e 'XCFit'. Once Clicked on it. You will see Cucumberish API, Cucumberish UI and Fitnesse Acceptance Tests targets. As shown\r\n\r\n![image](https://raw.githubusercontent.com/Shashikant86/XCFit-GIFS/master/new_targets.png)\r\n\r\n\r\n\r\n- Once Clicked on the target e.g 'Cucumberish UI Test Bundle' Xcode will create UI testing target with all the required files with Bridging hrader for Cucumberish UI Testing.\r\nOnce Clicked on the target e.g 'Fitnesse Acceptance Test Bundle' Xcode will create UI tAcceptance test with all the required files with Bridging headers for the Fitnesse Acceptance Test. We will see that in details soon.\r\n\r\n![image](https://raw.githubusercontent.com/Shashikant86/XCFit-GIFS/master/XCFit_Setup.gif)\r\nYou can watch YouTube video of XCFit setup [here](https://www.youtube.com/watch?v=Q3cKinwYwhE)\r\n\r\n- This script also set new file type in Xcode to create new Gherking feature file\r\n\r\n## Setting up Cucumberish UI Target\r\n\r\n3 Steps to setup Cucumberish. You don't need to use Cocoapods to setup this target.\r\n\r\n\r\n- Add new target iOS/macOS project and Select \"File -> New -> Target -> XCFit -> Cucumberish UI Test Bundle\". Give it a name you like e.g CucumberishUITests\r\n\r\nNow that Xcode has created brand new target with all required Swift and Objective-C files to run Cucumberish. All Xcode setting has been done by the Xcode Template. Don't worry about configuting anything.\r\n\r\n\r\n- Now that you have to CD into the Cucumberish target directory .eg CucumberishUITests\r\n\r\n```sh\r\n$ cd $CUCUMBERISH_TARGET_DIR\r\n$ xcfit get_cucumberish 0.0.7\r\n```\r\nThis will download Cucumberish directory from version 0.0.7 and also creats 'Features' directory. You can then reference those directory in Xcode. For \"Cucumberish\" directory select 'Copy if needed and Create Group' and for the \"Features\" directory select don't create group or Copy if needed. Just \" create folder reference\"\r\nNow Add sample Feature File to 'Features' directory either by File->New->Gherkin Or Just add it using your favourite text editor e.g demo.feature with content \r\n\r\n```\r\nFeature: Demo App Feature\r\n\r\nScenario: Demo Scenario \r\n\r\nGiven the app is running\r\n\r\n```\r\n\r\n- Finally from the Cucumberish target 'General' setting select 'Testing -> Target To Test' and configure scheme to add Cucumeerish UI target to Test\r\n\r\nYou are done !!\r\n\r\nYou can watch YouTube video of Cucumberish Setup [here](https://www.youtube.com/watch?v=Wd9myhNkpx4)\r\n\r\nYou can add more feature/Scenarios and implement steps definitions inside your Swift File. [Ahmed-Ali](https://github.com/Ahmed-Ali) creator of Cucumberish already implemented useful pre-defined steps have a look at this [Swift file](https://github.com/Ahmed-Ali/Cucumberish/blob/master/CucumberishExample/CucumberishExampleUITests/CCIStepDefinitions.swift). You are free to try Page Object Pattern and all other crazy stuff to abstract and refactor your Swift code. \r\n\r\n\r\n\r\n![image](https://raw.githubusercontent.com/Shashikant86/XCFit-GIFS/master/CucumberishDemo.gif)\r\n\r\n## Setting up Fitnesse Acceptance Target\r\n\r\nYou can also setup Fitnesse Acceptance Tests but you need to use Cocoapod for this target.\r\n\r\nBasically Steps are pretty much same mentioned in the [OCSlimProject](http://paulstringer.github.io/OCSlimProject/) but most of them are automated for simplicity. Here is simple way to set Fitnesse Acceptance tests for iOS/MacOS Apps\r\n\r\n\r\n\r\n- Create new target, \"File --> New --> Target --> XCFit --> Fitnesse Acceptance Test\". Give it a suitable name e.g 'AcceptanceTests'\r\n\r\n- Create/Update Podfile with\r\n\r\n\r\n```ruby\r\n\r\nuse_frameworks!\r\n\r\ntarget 'AcceptanceTests' do\r\n  pod 'XCFit'\r\nend\r\n```\r\n\r\nRun 'Pod install' and build newly created Acceptance target from Xcode. You should see 'LaunchFitnesse' Script geerated and Your app should be talking to fitnesse now.\r\n\r\n- Now CD into FITNESSE_TARGET directory and Get Fitnesse JAR file by running\r\n\r\n```sh\r\n$ cd $FITNESSE_TARGET\r\n$ xcfit get_fitnesse\r\n```\r\n\r\nYou should have fitnesse-standalone file downloaded in the target directory. You can now execute 'LaunchFitnesse'\r\n\r\n```sh\r\n$ ./LaunchFitnesse\r\n```\r\n\r\nNow you should have Fitnesse up and runnig. Follow Paul's article for the details on how to write acceptance tests [here](http://stringerstheory.net/acceptance-testing-with-ios/)\r\n\r\nYou can watch YouTube video of XCFit Fitnesse [here](https://www.youtube.com/watch?v=Wd9myhNkpx4)\r\n\r\n![image](https://raw.githubusercontent.com/Shashikant86/XCFit-GIFS/master/AcceptanceTests.gif)\r\n\r\n## Continous Integration & Test Reporting\r\n\r\nContinous Integration is very important and you simply can't avoid that. XCFit will be easily configured on any CI server including Apple's own [Xcode Server](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/xcode_guide-continuous_integration/) or very polular one [Jenkins](https://jenkins.io/) as we can generate reports in both HTML and JUnit format. \r\nAs of now, you might be running tests within Xcode, but there are some awsome tools which allows us to run our tests from command line. The 'xcodebuild' is being used to build and test Xcode Schemes. [Fastlane](https://github.com/fastlane/fastlane) seems much easier option to automate everything but it's upto you. These are long commands but you k ow better how to Script it Or Fastlane it, right ? :)\r\n\r\nCurently XCFitDemo App is configured on TravisCI which runs both Cucumberish and Fitnesse Tests. The sample .travis.yml is in the Github repo and sample logs from TravisCI [here](https://travis-ci.org/Shashikant86/XCFit/builds/145963673). Watch out Live Execution : \r\n\r\n![image](https://raw.githubusercontent.com/Shashikant86/XCFit-GIFS/master/Travis_XCFit.gif)\r\n\r\n### Cucumberish\r\n\r\nYou can execute Cucumberish tests with like this for XCFitDemo App.\r\n\r\n[XCPretty](https://github.com/supermarin/xcpretty) can be used to generate JUnit Or HTML report as below\r\n\r\n\r\n```sh\r\nxcodebuild -workspace XCFitDemo.xcworkspace -scheme XCFitDemo -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 6' test | xcpretty -r html -r junit --test --color\r\n```\r\n\r\nYou can now analyse the reports generated in the 'build/reports' directory. You will find both HTML and JUnit reports. You can configure these reports with Xcode-Server, Jenkins, TeamCity easily in the post build setting. \r\n\r\n```\r\n$ open build/reports/tests.html\r\n```\r\n\r\n\r\n![image](https://raw.githubusercontent.com/Shashikant86/XCFit-GIFS/master/html_reports.png)\r\n\r\n### Fitnesse\r\n\r\nYou can first build the Acceptance target\r\n\r\n```sh\r\n$ xcodebuild -workspace XCFitDemo.xcworkspace -scheme XCFitAcceptanceTests -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 6' clean build | xcpretty\r\n```\r\n\r\nNow run the Fitnesse tests using\r\n\r\n```sh\r\n\r\n$ java -jar fitnesse-standalone.jar -v -o -c \"FrontPage?suite\"\r\n```\r\nYou can also set reports directory and generate Junit style reports inside the \"XCFitDemo/FitNesseRoot/files/testResults/\" directory. You can configure these reports with Xcode-Server, Jenkins, TeamCity easily in the post build setting. \r\n\r\n\r\n\r\n## What XCFit can solve in iOS/macOS team?\r\nXCFit can bring lot of improvement the way you work. The most common problems in iOS development is explained by Paul Stringer in this [article](http://stringerstheory.net/acceptance-testing-with-ios/). XCFit can solve few of them\r\n\r\n  - Better Developer/QA collabration, Early QA Involvement.\r\n\r\nUsually,in the iOS development world, Developer build an app using Swift and Objective-C and army of manual and automated QA uses tools like Apppium, Calabash using languages like Ruby, Java, Python WTF !!. QA and Developers world is totally different. With XCFit you will be speaking same language that is \"Swift\". QA can write test script as we build. No need to wait until build is handed over. Just work with developer ! Little bit of learning curve for QA but you will save developers time as they don't to learn Java, Pyth or Ruby to help QA team\r\n\r\n   - Quick Acceptance & UI testing setup\r\n\r\nYou will be surprised by how easily/quickly you can setup Fitnesse(Acceptance Test) and Cucumberish(UI Testing) environmant in Xcode and running your first test.\r\n\r\n   -  Getting Business people involved\r\n\r\nAs we can now able to write scenarios with Given/When/Then and decision tables. We can get business people involved to contribute to acceptance criteria. In short we got all benefits of BDD in iOS/macOS project.\r\n\r\n   - Developers don't need to learn Ruby or similar ! Just stick to Swift\r\n\r\nYou must be happy as you won't need to learn other language just in case QA ask something to solve. With XCFit it's everything Swift.\r\n\r\n  - Fix failed attempt to automate testing by QA team\r\n\r\nAs of now your QA team might have tried all wrappers on [UIAutomation](https://developer.apple.com/library/tvos/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/UIAutomation.html) e.g Appium, Calabash, Frank, KIF etc etc and keeping themselve busy writing some Ruby, Python, Java code to automate testing and all that attempts results in Slow, Brittle, Untrusted, Non-valuable UI tests causing harm to mobile development rather than good. With XCFit, everyone will be speaking same language and you can cover businness logic with lighting fast Fitnesse Tests and major journeys with UI tests. Keep it 80:20 means 80% Fitness and 20% Cucumberish or XCUI.\r\n\r\n\r\n\r\n# Video Demo\r\n\r\n### XCFit Xcode Setup\r\n\r\n[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/Q3cKinwYwhE/0.jpg)](http://www.youtube.com/watch?v=Q3cKinwYwhE)\r\n\r\n\r\n### XCFit Cucumberish Demo\r\n\r\n[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/Wd9myhNkpx4/0.jpg)](http://www.youtube.com/watch?v=Wd9myhNkpx4)\r\n\r\n\r\n### XCFit Fitnesse Demo\r\n\r\n[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/xFRSIugJ-FA/0.jpg)](http://www.youtube.com/watch?v=xFRSIugJ-FA)\r\n\r\n## Author\r\n\r\nShashikant86, shashikant.jagtap@icloud.com\r\n\r\n# TODO\r\n\r\n * Swift Implementation of Gherkin Parser \r\n * Cocoapods free installtion \r\n * Setting up XCFit on Apple's own CI Xcode Server \r\n\r\n## LICENSE\r\n\r\nCopyright © 2014 Shashikant Jagtap, http://shashikantjagtap.net\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n## Contributing\r\n\r\n1. Fork it ( https://github.com/Shashikant86/XCFit/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}